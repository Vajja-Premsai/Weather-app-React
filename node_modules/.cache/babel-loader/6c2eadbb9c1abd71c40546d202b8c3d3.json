{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext, useEffect } from 'react';\nimport { useWeatherData } from './useWeatherData';\nimport { WeatherDataContext } from '../context/weatherDataContext';\nconst API_URL = `${process.env.REACT_APP_API_LINK}/weather`;\n\nconst useButtonLocationLogic = () => {\n  _s();\n\n  const {\n    state,\n    dispatch\n  } = useContext(WeatherDataContext);\n  const {\n    fetchWeatherData\n  } = useWeatherData(`${API_URL}?lat=${state.latitude}&lon=${state.longitude}&units=metric&appid=${process.env.REACT_APP_API_KEY}`);\n  useEffect(() => {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        dispatch({\n          type: 'SET_LAT',\n          payload: latitude\n        });\n        dispatch({\n          type: 'SET_LON',\n          payload: longitude\n        });\n      }, error => {\n        console.error('Error getting user location:', error);\n      });\n    } else {\n      console.log(\"Geolocation not available\");\n    }\n  }, []);\n\n  const handleFetchWeather = () => {\n    fetchWeatherData();\n  };\n\n  return {\n    handleFetchWeather\n  };\n};\n\n_s(useButtonLocationLogic, \"uqNX/sPo9gPbYuMEPxqZe5dppko=\", false, function () {\n  return [useWeatherData];\n});\n\nexport default useButtonLocationLogic;","map":{"version":3,"names":["useContext","useEffect","useWeatherData","WeatherDataContext","API_URL","process","env","REACT_APP_API_LINK","useButtonLocationLogic","state","dispatch","fetchWeatherData","latitude","longitude","REACT_APP_API_KEY","navigator","geolocation","getCurrentPosition","position","coords","type","payload","error","console","log","handleFetchWeather"],"sources":["D:/learnings/login_app/Weather-app/src/hook/ButtonLocationLogic.js"],"sourcesContent":["import { useContext, useEffect } from 'react';\nimport { useWeatherData } from './useWeatherData';\nimport { WeatherDataContext } from '../context/weatherDataContext';\n\nconst API_URL = `${process.env.REACT_APP_API_LINK}/weather`;\n\nconst useButtonLocationLogic = () => {\n  const { state, dispatch } = useContext(WeatherDataContext);\n  const { fetchWeatherData } = useWeatherData(`${API_URL}?lat=${state.latitude}&lon=${state.longitude}&units=metric&appid=${process.env.REACT_APP_API_KEY}`);\n\n  useEffect(() => {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          dispatch({ type: 'SET_LAT', payload: latitude });\n          dispatch({ type: 'SET_LON', payload: longitude });\n        },\n        (error) => {\n          console.error('Error getting user location:', error);\n        }\n      );\n    } else {\n      console.log(\"Geolocation not available\");\n    }\n  }, []);\n\n  const handleFetchWeather = () => {\n    fetchWeatherData();\n  };\n\n  return { handleFetchWeather };\n};\n\nexport default useButtonLocationLogic;\n"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,SAArB,QAAsC,OAAtC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,kBAAT,QAAmC,+BAAnC;AAEA,MAAMC,OAAO,GAAI,GAAEC,OAAO,CAACC,GAAR,CAAYC,kBAAmB,UAAlD;;AAEA,MAAMC,sBAAsB,GAAG,MAAM;EAAA;;EACnC,MAAM;IAAEC,KAAF;IAASC;EAAT,IAAsBV,UAAU,CAACG,kBAAD,CAAtC;EACA,MAAM;IAAEQ;EAAF,IAAuBT,cAAc,CAAE,GAAEE,OAAQ,QAAOK,KAAK,CAACG,QAAS,QAAOH,KAAK,CAACI,SAAU,uBAAsBR,OAAO,CAACC,GAAR,CAAYQ,iBAAkB,EAA7G,CAA3C;EAEAb,SAAS,CAAC,MAAM;IACd,IAAI,iBAAiBc,SAArB,EAAgC;MAC9BA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACGC,QAAD,IAAc;QACZ,MAAM;UAAEN,QAAF;UAAYC;QAAZ,IAA0BK,QAAQ,CAACC,MAAzC;QACAT,QAAQ,CAAC;UAAEU,IAAI,EAAE,SAAR;UAAmBC,OAAO,EAAET;QAA5B,CAAD,CAAR;QACAF,QAAQ,CAAC;UAAEU,IAAI,EAAE,SAAR;UAAmBC,OAAO,EAAER;QAA5B,CAAD,CAAR;MACD,CALH,EAMGS,KAAD,IAAW;QACTC,OAAO,CAACD,KAAR,CAAc,8BAAd,EAA8CA,KAA9C;MACD,CARH;IAUD,CAXD,MAWO;MACLC,OAAO,CAACC,GAAR,CAAY,2BAAZ;IACD;EACF,CAfQ,EAeN,EAfM,CAAT;;EAiBA,MAAMC,kBAAkB,GAAG,MAAM;IAC/Bd,gBAAgB;EACjB,CAFD;;EAIA,OAAO;IAAEc;EAAF,CAAP;AACD,CA1BD;;GAAMjB,sB;UAEyBN,c;;;AA0B/B,eAAeM,sBAAf"},"metadata":{},"sourceType":"module"}