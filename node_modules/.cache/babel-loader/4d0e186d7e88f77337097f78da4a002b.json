{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext } from \"react\";\nimport { WeatherDataContext } from \"../context/weatherDataContext\";\n/**\n * Custom hook to fetch weather data from the API.\n * @returns {Object} - An object containing the fetchWeatherData function.\n */\n\nexport function useWeatherData() {\n  _s();\n\n  // Accessing weather data context\n  const {\n    dispatch\n  } = useContext(WeatherDataContext);\n  /**\n   * Function to fetch weather data from the API.\n   */\n\n  const fetchWeatherData = async cityName => {\n    try {\n      // Get the API key and base URL from environment variables\n      const apiKey = process.env.REACT_APP_API_KEY;\n      const baseURL = process.env.REACT_APP_API_BASE_URL || \"\";\n\n      if (!apiKey) {\n        throw new Error(\"API key not available\");\n      }\n\n      if (!cityName) {\n        throw new Error(\"City name is required\");\n      }\n\n      const url = `${baseURL}/weather?q=${cityName}&units=metric&appid=${apiKey}`;\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      }); // Call the OpenWeatherMap API with the constructed URL\n\n      const response = await fetch(url);\n\n      if (!response.ok) {\n        throw new Error('Network response was not ok or City name is invalid');\n      }\n\n      const result = await response.json();\n\n      if (result) {\n        // Update the weather data state\n        dispatch({\n          type: 'SET_WEATHER_DATA',\n          payload: result\n        });\n        dispatch({\n          type: 'SET_ERROR',\n          payload: \"\"\n        });\n      } else {\n        throw new Error(\"Weather data not available\");\n      }\n    } catch (error) {\n      console.error('Error occurred while fetching weather data:', error);\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message\n      });\n    } finally {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  };\n\n  return {\n    fetchWeatherData\n  };\n}\n\n_s(useWeatherData, \"y0TpHjmA0G5gpKtNPtwKueTIMNE=\");","map":{"version":3,"names":["useContext","WeatherDataContext","useWeatherData","dispatch","fetchWeatherData","cityName","apiKey","process","env","REACT_APP_API_KEY","baseURL","REACT_APP_API_BASE_URL","Error","url","type","payload","response","fetch","ok","result","json","error","console","message"],"sources":["D:/learnings/login_app/Weather-app/src/hook/useWeatherData.js"],"sourcesContent":["import { useContext } from \"react\";\nimport { WeatherDataContext } from \"../context/weatherDataContext\";\n\n/**\n * Custom hook to fetch weather data from the API.\n * @returns {Object} - An object containing the fetchWeatherData function.\n */\n\nexport function useWeatherData() {\n  // Accessing weather data context\n  const { dispatch } = useContext(WeatherDataContext);\n\n  /**\n   * Function to fetch weather data from the API.\n   */\n\n  const fetchWeatherData = async (cityName) => {\n    try {\n      // Get the API key and base URL from environment variables\n      const apiKey = process.env.REACT_APP_API_KEY;\n      const baseURL = process.env.REACT_APP_API_BASE_URL || \"\";\n\n      if (!apiKey) {\n        throw new Error(\"API key not available\");\n      }\n\n      if (!cityName) {\n        throw new Error(\"City name is required\");\n      }\n\n      const url = `${baseURL}/weather?q=${cityName}&units=metric&appid=${apiKey}`;\n\n      dispatch({ type: 'SET_LOADING', payload: true });\n\n      // Call the OpenWeatherMap API with the constructed URL\n      const response = await fetch(url);\n\n      if (!response.ok) {\n        throw new Error('Network response was not ok or City name is invalid');\n      }\n\n      const result = await response.json();\n\n      if (result) {\n        // Update the weather data state\n        dispatch({ type: 'SET_WEATHER_DATA', payload: result });\n        dispatch({ type: 'SET_ERROR', payload: \"\" });\n      } else {\n        throw new Error(\"Weather data not available\");\n      }\n    } catch (error) {\n      console.error('Error occurred while fetching weather data:', error);\n      dispatch({ type: 'SET_ERROR', payload: error.message });\n    } finally {\n      dispatch({ type: 'SET_LOADING', payload: false });\n    }\n  };\n\n  return { fetchWeatherData };\n}\n"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,kBAAT,QAAmC,+BAAnC;AAEA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,cAAT,GAA0B;EAAA;;EAC/B;EACA,MAAM;IAAEC;EAAF,IAAeH,UAAU,CAACC,kBAAD,CAA/B;EAEA;AACF;AACA;;EAEE,MAAMG,gBAAgB,GAAG,MAAOC,QAAP,IAAoB;IAC3C,IAAI;MACF;MACA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA3B;MACA,MAAMC,OAAO,GAAGH,OAAO,CAACC,GAAR,CAAYG,sBAAZ,IAAsC,EAAtD;;MAEA,IAAI,CAACL,MAAL,EAAa;QACX,MAAM,IAAIM,KAAJ,CAAU,uBAAV,CAAN;MACD;;MAED,IAAI,CAACP,QAAL,EAAe;QACb,MAAM,IAAIO,KAAJ,CAAU,uBAAV,CAAN;MACD;;MAED,MAAMC,GAAG,GAAI,GAAEH,OAAQ,cAAaL,QAAS,uBAAsBC,MAAO,EAA1E;MAEAH,QAAQ,CAAC;QAAEW,IAAI,EAAE,aAAR;QAAuBC,OAAO,EAAE;MAAhC,CAAD,CAAR,CAfE,CAiBF;;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAD,CAA5B;;MAEA,IAAI,CAACG,QAAQ,CAACE,EAAd,EAAkB;QAChB,MAAM,IAAIN,KAAJ,CAAU,qDAAV,CAAN;MACD;;MAED,MAAMO,MAAM,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAArB;;MAEA,IAAID,MAAJ,EAAY;QACV;QACAhB,QAAQ,CAAC;UAAEW,IAAI,EAAE,kBAAR;UAA4BC,OAAO,EAAEI;QAArC,CAAD,CAAR;QACAhB,QAAQ,CAAC;UAAEW,IAAI,EAAE,WAAR;UAAqBC,OAAO,EAAE;QAA9B,CAAD,CAAR;MACD,CAJD,MAIO;QACL,MAAM,IAAIH,KAAJ,CAAU,4BAAV,CAAN;MACD;IACF,CAjCD,CAiCE,OAAOS,KAAP,EAAc;MACdC,OAAO,CAACD,KAAR,CAAc,6CAAd,EAA6DA,KAA7D;MACAlB,QAAQ,CAAC;QAAEW,IAAI,EAAE,WAAR;QAAqBC,OAAO,EAAEM,KAAK,CAACE;MAApC,CAAD,CAAR;IACD,CApCD,SAoCU;MACRpB,QAAQ,CAAC;QAAEW,IAAI,EAAE,aAAR;QAAuBC,OAAO,EAAE;MAAhC,CAAD,CAAR;IACD;EACF,CAxCD;;EA0CA,OAAO;IAAEX;EAAF,CAAP;AACD;;GAnDeF,c"},"metadata":{},"sourceType":"module"}