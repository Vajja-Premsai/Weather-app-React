{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext } from \"react\";\nimport { WeatherDataContext } from \"../context/weatherDataContext\";\n/**\n * Custom hook to fetch weather data from the API.\n * @param {string} url - The URL for fetching weather data.\n * @returns {Object} - An object containing the fetchWeatherData function.\n */\n\nexport function useWeatherData(url) {\n  _s();\n\n  // Accessing weather data context\n  const {\n    dispatch\n  } = useContext(WeatherDataContext);\n  /**\n   * Function to fetch weather data from the API.\n   */\n\n  const apiKey = process.env.REACT_APP_API_KEY;\n\n  const fetchWeatherData = async () => {\n    if (url) {\n      try {\n        dispatch({\n          type: 'SET_LOADING',\n          payload: true\n        }); // Call the OpenWeatherMap API with the provided URL\n\n        const response = await fetch(url);\n\n        if (!response.ok) {\n          throw new Error('Network response was not ok or City name is invalid');\n        }\n\n        const result = await response.json();\n\n        if (result) {\n          // Update the weather data state\n          dispatch({\n            type: 'SET_WEATHER_DATA',\n            payload: result\n          });\n          dispatch({\n            type: 'SET_ERROR',\n            payload: \"\"\n          });\n        } else {\n          throw new Error(\"Weather data not available\");\n        }\n      } catch (error) {\n        console.error('Error occurred while fetching weather data:', error); // const msg =\"OOPS !! Error fetching weather data. Please try again later.\";\n\n        dispatch({\n          type: 'SET_ERROR',\n          payload: error.message\n        });\n      } finally {\n        dispatch({\n          type: 'SET_LOADING',\n          payload: false\n        });\n      }\n    } else {\n      // Reset the weather data state\n      dispatch({\n        type: 'SET_ERROR',\n        payload: \"Geo Location Failed\"\n      });\n    }\n  };\n\n  return {\n    fetchWeatherData\n  };\n}\n\n_s(useWeatherData, \"y0TpHjmA0G5gpKtNPtwKueTIMNE=\");","map":{"version":3,"names":["useContext","WeatherDataContext","useWeatherData","url","dispatch","apiKey","process","env","REACT_APP_API_KEY","fetchWeatherData","type","payload","response","fetch","ok","Error","result","json","error","console","message"],"sources":["D:/learnings/login_app/Weather-app/src/hook/useWeatherData.js"],"sourcesContent":["import { useContext } from \"react\";\nimport { WeatherDataContext } from \"../context/weatherDataContext\";\n\n/**\n * Custom hook to fetch weather data from the API.\n * @param {string} url - The URL for fetching weather data.\n * @returns {Object} - An object containing the fetchWeatherData function.\n */\n\nexport function useWeatherData(url) {\n  // Accessing weather data context\n  const { dispatch } = useContext(WeatherDataContext);\n\n  /**\n   * Function to fetch weather data from the API.\n   */\n  const apiKey = process.env.REACT_APP_API_KEY;\n\n  const fetchWeatherData = async () => {\n    if (url) {\n      try {\n        dispatch({ type: 'SET_LOADING', payload: true })\n        // Call the OpenWeatherMap API with the provided URL\n        const response = await fetch(url);\n        if (!response.ok) {\n          throw new Error('Network response was not ok or City name is invalid');\n        }\n        const result = await response.json();\n\n        if(result){\n          // Update the weather data state\n          dispatch({ type: 'SET_WEATHER_DATA', payload: result });\n          dispatch({ type: 'SET_ERROR', payload: \"\" });\n        }\n        else{\n          throw new Error(\"Weather data not available\");\n        }\n        \n      } catch (error) {\n        console.error('Error occurred while fetching weather data:', error);\n        // const msg =\"OOPS !! Error fetching weather data. Please try again later.\";\n        dispatch({ type: 'SET_ERROR', payload: error.message });\n      }\n      finally{\n        dispatch({ type: 'SET_LOADING', payload: false })\n      }\n    } else {\n      // Reset the weather data state\n      dispatch({ type: 'SET_ERROR', payload: \"Geo Location Failed\" });\n      \n    }\n  };\n\n  return { fetchWeatherData };\n}\n"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,kBAAT,QAAmC,+BAAnC;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,cAAT,CAAwBC,GAAxB,EAA6B;EAAA;;EAClC;EACA,MAAM;IAAEC;EAAF,IAAeJ,UAAU,CAACC,kBAAD,CAA/B;EAEA;AACF;AACA;;EACE,MAAMI,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA3B;;EAEA,MAAMC,gBAAgB,GAAG,YAAY;IACnC,IAAIN,GAAJ,EAAS;MACP,IAAI;QACFC,QAAQ,CAAC;UAAEM,IAAI,EAAE,aAAR;UAAuBC,OAAO,EAAE;QAAhC,CAAD,CAAR,CADE,CAEF;;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACV,GAAD,CAA5B;;QACA,IAAI,CAACS,QAAQ,CAACE,EAAd,EAAkB;UAChB,MAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN;QACD;;QACD,MAAMC,MAAM,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAArB;;QAEA,IAAGD,MAAH,EAAU;UACR;UACAZ,QAAQ,CAAC;YAAEM,IAAI,EAAE,kBAAR;YAA4BC,OAAO,EAAEK;UAArC,CAAD,CAAR;UACAZ,QAAQ,CAAC;YAAEM,IAAI,EAAE,WAAR;YAAqBC,OAAO,EAAE;UAA9B,CAAD,CAAR;QACD,CAJD,MAKI;UACF,MAAM,IAAII,KAAJ,CAAU,4BAAV,CAAN;QACD;MAEF,CAlBD,CAkBE,OAAOG,KAAP,EAAc;QACdC,OAAO,CAACD,KAAR,CAAc,6CAAd,EAA6DA,KAA7D,EADc,CAEd;;QACAd,QAAQ,CAAC;UAAEM,IAAI,EAAE,WAAR;UAAqBC,OAAO,EAAEO,KAAK,CAACE;QAApC,CAAD,CAAR;MACD,CAtBD,SAuBO;QACLhB,QAAQ,CAAC;UAAEM,IAAI,EAAE,aAAR;UAAuBC,OAAO,EAAE;QAAhC,CAAD,CAAR;MACD;IACF,CA3BD,MA2BO;MACL;MACAP,QAAQ,CAAC;QAAEM,IAAI,EAAE,WAAR;QAAqBC,OAAO,EAAE;MAA9B,CAAD,CAAR;IAED;EACF,CAjCD;;EAmCA,OAAO;IAAEF;EAAF,CAAP;AACD;;GA7CeP,c"},"metadata":{},"sourceType":"module"}