{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext } from \"react\";\nimport { WeatherDataContext } from \"../context/weatherDataContext\";\n/**\n * Custom hook to fetch weather data from the API.\n * @param {string} url - The URL for fetching weather data.\n * @returns {Object} - An object containing the fetchWeatherData function.\n */\n\nexport function useWeatherData(url) {\n  _s();\n\n  // Accessing weather data context\n  const {\n    dispatch\n  } = useContext(WeatherDataContext);\n  /**\n   * Function to fetch weather data from the API.\n   */\n\n  const fetchWeatherData = async () => {\n    if (url) {\n      try {\n        dispatch({\n          type: 'SET_LOADING',\n          payload: true\n        }); // Call the OpenWeatherMap API with the provided URL\n\n        const response = await fetch(url);\n\n        if (!response.ok) {\n          throw new Error('Network response was not ok or City name is invalid');\n        }\n\n        const contentType = response.headers.get('content-type');\n\n        if (contentType && contentType.includes('application/json')) {\n          const result = await response.json();\n\n          if (result) {\n            // Update the weather data state\n            dispatch({\n              type: 'SET_WEATHER_DATA',\n              payload: result\n            });\n            dispatch({\n              type: 'SET_ERROR',\n              payload: ''\n            });\n          } else {\n            throw new Error('Weather data not available');\n          }\n        } else {\n          // Handle non-JSON response (e.g., error message or HTML)\n          throw new Error('Invalid response format: Not JSON');\n        }\n      } catch (error) {\n        console.error('Error occurred while fetching weather data:', error);\n        dispatch({\n          type: 'SET_ERROR',\n          payload: error.message\n        });\n      } finally {\n        dispatch({\n          type: 'SET_LOADING',\n          payload: false\n        });\n      }\n    } else {\n      // Reset the weather data state\n      dispatch({\n        type: 'SET_ERROR',\n        payload: 'Geo Location Failed'\n      });\n    }\n  };\n\n  return {\n    fetchWeatherData\n  };\n}\n\n_s(useWeatherData, \"y0TpHjmA0G5gpKtNPtwKueTIMNE=\");","map":{"version":3,"names":["useContext","WeatherDataContext","useWeatherData","url","dispatch","fetchWeatherData","type","payload","response","fetch","ok","Error","contentType","headers","get","includes","result","json","error","console","message"],"sources":["D:/learnings/login_app/Weather-app/src/hook/useWeatherData.js"],"sourcesContent":["import { useContext } from \"react\";\nimport { WeatherDataContext } from \"../context/weatherDataContext\";\n\n/**\n * Custom hook to fetch weather data from the API.\n * @param {string} url - The URL for fetching weather data.\n * @returns {Object} - An object containing the fetchWeatherData function.\n */\n\nexport function useWeatherData(url) {\n  // Accessing weather data context\n  const { dispatch } = useContext(WeatherDataContext);\n\n  /**\n   * Function to fetch weather data from the API.\n   */\n  const fetchWeatherData = async () => {\n    if (url) {\n      try {\n        dispatch({ type: 'SET_LOADING', payload: true })\n        // Call the OpenWeatherMap API with the provided URL\n        const response = await fetch(url);\n\n        if (!response.ok) {\n          throw new Error('Network response was not ok or City name is invalid');\n        }\n\n        const contentType = response.headers.get('content-type');\n        if (contentType && contentType.includes('application/json')) {\n          const result = await response.json();\n\n          if (result) {\n            // Update the weather data state\n            dispatch({ type: 'SET_WEATHER_DATA', payload: result });\n            dispatch({ type: 'SET_ERROR', payload: '' });\n          } else {\n            throw new Error('Weather data not available');\n          }\n        } else {\n          // Handle non-JSON response (e.g., error message or HTML)\n          throw new Error('Invalid response format: Not JSON');\n        }\n      } catch (error) {\n        console.error('Error occurred while fetching weather data:', error);\n        dispatch({ type: 'SET_ERROR', payload: error.message });\n      } finally {\n        dispatch({ type: 'SET_LOADING', payload: false });\n      }\n    } else {\n      // Reset the weather data state\n      dispatch({ type: 'SET_ERROR', payload: 'Geo Location Failed' });\n    }\n  };\n\n  return { fetchWeatherData };\n}\n"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,kBAAT,QAAmC,+BAAnC;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,cAAT,CAAwBC,GAAxB,EAA6B;EAAA;;EAClC;EACA,MAAM;IAAEC;EAAF,IAAeJ,UAAU,CAACC,kBAAD,CAA/B;EAEA;AACF;AACA;;EACE,MAAMI,gBAAgB,GAAG,YAAY;IACnC,IAAIF,GAAJ,EAAS;MACP,IAAI;QACFC,QAAQ,CAAC;UAAEE,IAAI,EAAE,aAAR;UAAuBC,OAAO,EAAE;QAAhC,CAAD,CAAR,CADE,CAEF;;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACN,GAAD,CAA5B;;QAEA,IAAI,CAACK,QAAQ,CAACE,EAAd,EAAkB;UAChB,MAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN;QACD;;QAED,MAAMC,WAAW,GAAGJ,QAAQ,CAACK,OAAT,CAAiBC,GAAjB,CAAqB,cAArB,CAApB;;QACA,IAAIF,WAAW,IAAIA,WAAW,CAACG,QAAZ,CAAqB,kBAArB,CAAnB,EAA6D;UAC3D,MAAMC,MAAM,GAAG,MAAMR,QAAQ,CAACS,IAAT,EAArB;;UAEA,IAAID,MAAJ,EAAY;YACV;YACAZ,QAAQ,CAAC;cAAEE,IAAI,EAAE,kBAAR;cAA4BC,OAAO,EAAES;YAArC,CAAD,CAAR;YACAZ,QAAQ,CAAC;cAAEE,IAAI,EAAE,WAAR;cAAqBC,OAAO,EAAE;YAA9B,CAAD,CAAR;UACD,CAJD,MAIO;YACL,MAAM,IAAII,KAAJ,CAAU,4BAAV,CAAN;UACD;QACF,CAVD,MAUO;UACL;UACA,MAAM,IAAIA,KAAJ,CAAU,mCAAV,CAAN;QACD;MACF,CAxBD,CAwBE,OAAOO,KAAP,EAAc;QACdC,OAAO,CAACD,KAAR,CAAc,6CAAd,EAA6DA,KAA7D;QACAd,QAAQ,CAAC;UAAEE,IAAI,EAAE,WAAR;UAAqBC,OAAO,EAAEW,KAAK,CAACE;QAApC,CAAD,CAAR;MACD,CA3BD,SA2BU;QACRhB,QAAQ,CAAC;UAAEE,IAAI,EAAE,aAAR;UAAuBC,OAAO,EAAE;QAAhC,CAAD,CAAR;MACD;IACF,CA/BD,MA+BO;MACL;MACAH,QAAQ,CAAC;QAAEE,IAAI,EAAE,WAAR;QAAqBC,OAAO,EAAE;MAA9B,CAAD,CAAR;IACD;EACF,CApCD;;EAsCA,OAAO;IAAEF;EAAF,CAAP;AACD;;GA9CeH,c"},"metadata":{},"sourceType":"module"}